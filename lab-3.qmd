---
title: "Lucas Kantorowski"
format: 
  dashboard:
    orientation: rows
    theme: vapor
    nav-buttons:
      - icon: github
        href: https://github.com/LKantoro/lab-3
        aria-label: GitHub
      - icon: linkedin
        href: https://www.linkedin.com/in/lucas-kantorowski/
        aria-label: LinkedIn
logo: images/wellcomelogo.png
logo-alt: Wellcome Organization Logo
---

```{r}
#| label: load-packages
#| message: false
library(tidyverse)
library(gt)
library(dplyr)
library(leaflet)
library(dplyr)
library(sf)
library(plotly)
library(readxl)

```

```{r}
#| label: read-in-wellcome-data

wgm2018_crosstab = read_excel(here::here("data", "wgm2018-dataset-crosstabs-all-countries.xlsx"), sheet = 1)

wgm2018_full = read_excel(here::here("data", "wgm2018-dataset-crosstabs-all-countries.xlsx"), sheet = 2)

wgm2018_dict = read_excel(here::here("data", "wgm2018-dataset-crosstabs-all-countries.xlsx"), sheet = 3)
```


```{r}
#creating string based on list provided
countriesstringsplit = str_split(wgm2018_dict[1,3], ',')

#changing the vector into a df and eliminating the last row, which was blank
countriesdf = as.data.frame(countriesstringsplit, col.names = c("country")) %>%
  filter(!row_number() %in% c(145))

#creating a two column data frame about the '=' and changing the code to numeric
countriesdf = countriesdf %>% 
  separate_wider_delim(country, delim = "=", 
                       names = c("country_code", "country_name")) %>% 
  mutate(country_code = as.numeric(country_code))
```


```{r}
#similar process for splitting regions, as was done above for countries

regionsstringsplit = str_split(wgm2018_dict[57,3], ',')

regionsdf = as.data.frame(regionsstringsplit, col.names = c("region")) %>%
  filter(!row_number() %in% c(20))

regionsdf = regionsdf %>% 
  separate_wider_delim(region, delim = "=", 
                       names =c("region_code", "region_name")) %>% 
  mutate(region_code = as.numeric(region_code))


#creating a new column for world region to be used to split the graph

regionsdf = regionsdf %>% mutate('map_region' = case_when(
          region_code %in% c(9,10,11,12, 18) ~ 'Asia and Australia',
          region_code %in% c(1,2,4,5) ~ 'Sub-Saharan Africa',
          region_code %in% c(6,7,8) ~ 'Americas',
          region_code %in% c(15,16,17) ~ 'Europe',
          region_code %in% c(3,13) ~ 'Middle East and North Africa',
          region_code == 14 ~ 'Former Soviet Union',
          region_code == 0 ~ 'Not Assigned'))
```


```{r}
wgm2018_full_new1 = left_join(wgm2018_full, countriesdf, 
                              by = join_by(WP5 == country_code))

wgm2018_full_new2 = left_join(wgm2018_full_new1, regionsdf, 
                              by = join_by(Regions_Report == region_code))

countries_and_regions = wgm2018_full_new2 %>% 
  select(country_name, region_name, map_region) %>% distinct()

```


```{r}
#finding percentage who think vaccines are safe based on answering '1' to Q25

country_counts = wgm2018_full_new2 %>% group_by(country_name) %>% 
  summarise(total_count = n()) %>%
  rename('total_surveyed' = total_count)

vaccine_safe_counts = wgm2018_full_new2 %>% 
  group_by(country_name, Q25) %>% 
  summarise(total_count = n()) %>%
  rename('total_safe' = total_count) %>% 
  filter(Q25 == '1')

understand_science_counts = wgm2018_full_new2 %>% 
  group_by(country_name, Q2) %>% 
  summarise(total_count = n()) %>%
  rename('total_understand_science' = total_count) %>% 
  filter(Q2 == '1')

```






```{r}
#joining counts
graph1_tibble_vaccine = left_join(country_counts, vaccine_safe_counts, 
                          by = join_by(country_name == country_name))

#dividing people who think safe by people surveyed to find percentage
graph1_tibble_vaccine$value =
  graph1_tibble_vaccine$total_safe/graph1_tibble_vaccine$total_surveyed

graph1_tibble_vaccine = left_join(graph1_tibble_vaccine, countries_and_regions, 
                           by = join_by(country_name == country_name)) %>% 
  filter(map_region != "Not Assigned")

```


```{r}
#joining counts
graph1_tibble_science = left_join(country_counts, understand_science_counts, 
                          by = join_by(country_name == country_name))

#dividing people who understand science by people surveyed to find percentage
graph1_tibble_science$science_value =
  graph1_tibble_science$total_understand_science/graph1_tibble_science$total_surveyed

graph1_tibble_science = left_join(graph1_tibble_science, countries_and_regions, 
                           by = join_by(country_name == country_name)) %>% 
  filter(map_region != "Not Assigned")
```




```{r}
#| label: second-improved-visualization

#finding country geometries: https://r-graph-gallery.com/183-choropleth-map-with-leaflet.html

download.file(
  "https://raw.githubusercontent.com/holtzy/R-graph-gallery/master/DATA/world_shape_file.zip",
  destfile = "data/world_shape_file.zip"
)

#system("unzip DATA/world_shape_file.zip")

world_sf <- read_sf(paste0(
  getwd(), "/data/world_shape_file/",
  "TM_WORLD_BORDERS_SIMPL-0.3.shp"
))
```


```{r}
#joining country geometries and overall data frame together
graph2_df = right_join(graph1_tibble_science, world_sf, by = join_by(country_name == NAME))

```


```{r}
#getting the count of high trust in scientists by country
trust_scientists_counts = wgm2018_full_new2 %>% 
  group_by(country_name, Q11C) %>% summarise(total_count = n()) %>%
  rename('total_trust' = total_count) %>% filter(Q11C %in% c('1','2'))

trust_scientists_counts = trust_scientists_counts %>% group_by(country_name) %>%
  summarise(total_count = sum(total_trust))
```

```{r}
#joining with count of people surveyed
graph2_tibble = left_join(country_counts, trust_scientists_counts, by =
                            join_by(country_name == country_name))

#calculating percent of people who have high trust in scientists
graph2_tibble$trust_value = 
  round(graph2_tibble$total_count/graph2_tibble$total_surveyed * 100, 2)

graph2_df2 = right_join(graph2_df, graph2_tibble, by = join_by(country_name == country_name))
```


```{r}
#creating bins for coloring
bins = c(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100)

pal = colorBin("Paired", domain = graph2_df2$trust_value, bins = bins)

#converting data.frame to sf for graphing using leaflet: https://r-spatial.github.io/sf/reference/sf.html
graph2_df2 = st_sf(graph2_df2)
```






```{r}
#| label: load-data
#| message: false
olympics_full <- read_csv("data/olympics.csv")
```

```{r}
#| label: prep-data
olympics <- olympics_full |>
  filter(
    season == "Summer",
    !is.na(medal)
  ) |>
  separate_wider_delim(
    cols = team, 
    names = c("team", "suffix"), 
    delim = "-", 
    too_many = "merge", 
    too_few = "align_start"
  ) |>
  select(-suffix) |>
  mutate(medal = fct_relevel(medal, "Bronze", "Silver", "Gold"))
```


```{r}
#| label: calculate-values
lowest_mileage_cty <- mpg |>
  filter(cty == min(cty)) |>
  distinct(cty) |>
  pull(cty)

highest_mileage_cty <- mpg |>
  filter(cty == max(cty)) |>
  distinct(cty) |>
  pull(cty)
  
rounded_mean_city_mileage <- mpg |>
  summarize(round(mean(cty), 2)) |>
  pull()
```


# Page 1

## Rows - Plots

### Column - Medals by sport {height="60%"}

### Vaccines {.tabset}

```{r}
graph1_tibble_vaccine %>% ggplot(aes(x = value, fill = map_region, 
                              color = map_region)) +
  geom_dotplot(binwidth = .01) + 
  facet_grid(rows = vars(map_region), axis.labels = "margins") +
  labs(x = "", y = "", fill = "",
       title = "Strong Belief Vaccines Are Effective By Country and Region") +
  scale_x_continuous(labels = scales::percent) + xlim(0, 1) +
  geom_text(aes(x = .5, y = .8, label = map_region)) +
  theme_light() + 
  theme(strip.text = element_blank(), legend.position = "none", 
        panel.grid.minor = element_blank(), panel.grid.major.y =element_blank(),
        plot.title.position = "plot", axis.text.y = element_blank(), 
        axis.ticks.y = element_blank())
```





```{r}
graph1_tibble_science %>% ggplot(aes(x = science_value, fill = map_region, 
                              color = map_region)) +
  geom_dotplot(binwidth = .01) + 
  facet_grid(rows = vars(map_region), axis.labels = "margins") +
  labs(x = "", y = "", fill = "",
       title = "Strong Understanding of Science") +
  scale_x_continuous(labels = scales::percent) + xlim(0, 1) +
  geom_text(aes(x = .5, y = .8, label = map_region)) +
  theme_light() + 
  theme(strip.text = element_blank(), legend.position = "none", 
        panel.grid.minor = element_blank(), panel.grid.major.y =element_blank(),
        plot.title.position = "plot", axis.text.y = element_blank(), 
        axis.ticks.y = element_blank())
```





### Column - Medals by year{height="40%"}

```{r}
#| title: Medals by year
olympics |>
  count(year, medal) |>
  ggplot(aes(x = year, y = n, color = medal)) +
  geom_point(size = 0.5) +
  geom_line() +
  guides(color = guide_legend(reverse = TRUE)) +
  scale_x_continuous(breaks = seq(1896, 2020, 8)) +
  labs(
    x = "Year",
    y = NULL,
    color = "Medal"
  ) +
  theme_minimal() +
  theme(
    legend.position = "inside",
    legend.position.inside = c(0.9, 0.2),
    legend.direction = "horizontal",
    legend.background = element_rect(fill = "white", color = "gray")
  )
```


```{r}
#| content: valuebox
#| title: "Least efficient"
#| icon: fuel-pump-fill
#| color: danger
list(
  value = paste(lowest_mileage_cty, "mpg")
)
```


```{r}
#| content: valuebox
#| title: "Most efficient"
list(
  icon = "fuel-pump",
  color = "success",
  value = paste(highest_mileage_cty, "mpg")
)
```

# Page 2 {orientation="rows" scrolling="false"}


## Rows - Plots

### Column - Medals by sport {height="60%"}

```{r}
leaflet(graph2_df2) %>% addTiles() %>% 
  addPolygons(fillColor = ~pal(trust_value), weight = .2,  opacity = 1, 
              color = 'black', popup = ~country_name, label = ~trust_value, 
              stroke = FALSE) %>%
  addLegend(pal = pal, values = ~trust_value, position = "bottomleft", 
            title = "", labFormat = labelFormat(suffix = "%")) %>%
  addControl(c("Perecentage of Population Who Have Trust In Scientists"), 
             position = "topleft") %>%
  setView(lng = 0, lat = 0, zoom = 1.5) 
```

### Column - Medals by year{height="40%"}

```{r}
#| content: valuebox
#| title: "Most efficient"
list(
  icon = "fuel-pump",
  color = "success",
  value = paste(highest_mileage_cty, "mpg")
)
```



```{r}
#| title: Medals by year
olympics |>
  count(year, medal) |>
  ggplot(aes(x = year, y = n, color = medal)) +
  geom_point(size = 0.5) +
  geom_line() +
  guides(color = guide_legend(reverse = TRUE)) +
  scale_x_continuous(breaks = seq(1896, 2020, 8)) +
  labs(
    x = "Year",
    y = NULL,
    color = "Medal"
  ) +
  theme_minimal() +
  theme(
    legend.position = "inside",
    legend.position.inside = c(0.9, 0.2),
    legend.direction = "horizontal",
    legend.background = element_rect(fill = "white", color = "gray")
  )
```


## Sidebar {.sidebar}

hgdsfjkgxkghx